// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  accountId String @id @default(uuid())
  username  String @unique
  password  String
  email     String @unique

  //scalar list
  refreshToken RefreshToken?
  user         User?
}

model User {
  userId   String  @id @default(uuid())
  username String? @unique
  //relation
  account  Account @relation(fields: [accountId], references: [accountId], onDelete: Cascade)

  //foreign key
  accountId String @unique

  //scalar list
  post    Post[]
  comment Comment[]
}

model RefreshToken {
  tokenId      String  @id @default(uuid())
  refreshToken String?

  account   Account @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  accountId String  @unique
}

model Post {
  postId    String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relation
  author User @relation(fields: [authorId], references: [accountId], onDelete: Cascade)

  //foreign key
  authorId String

  //scalar list
  comment Comment[]
}

model Comment {
  commentId String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //self relation
  parentComment   Comment? @relation("nestedComment", fields: [parentCommentId], references: [commentId], onDelete: Restrict)
  parentCommentId String?

  childComment Comment[] @relation("nestedComment")

  //relation
  post   Post? @relation(fields: [postId], references: [postId], onDelete: Cascade)
  author User  @relation(fields: [authorId], references: [accountId])

  //foriegn key
  postId   String?
  authorId String
}
